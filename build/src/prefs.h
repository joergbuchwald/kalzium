// This file is generated by kconfig_compiler_kf5 from kalzium.kcfg.
// All changes you do to this file will be lost.
#ifndef PREFS_H
#define PREFS_H

#include <kconfigskeleton.h>
#include <QCoreApplication>
#include <QDebug>

class Prefs : public KConfigSkeleton
{
  public:

    static Prefs *self();
    ~Prefs();

    /**
      Set Selects the PSE
    */
    static
    void setSchemaPSE( int v )
    {
      if (!self()->isImmutable( QStringLiteral( "schemaPSE" ) ))
        self()->mSchemaPSE = v;
    }

    /**
      Get Selects the PSE
    */
    static
    int schemaPSE()
    {
      return self()->mSchemaPSE;
    }

    /**
      Set Selects the default color scheme
    */
    static
    void setColorschemebox( int v )
    {
      if (!self()->isImmutable( QStringLiteral( "colorschemebox" ) ))
        self()->mColorschemebox = v;
    }

    /**
      Get Selects the default color scheme
    */
    static
    int colorschemebox()
    {
      return self()->mColorschemebox;
    }

    /**
      Set Selects the default gradient
    */
    static
    void setGradient( int v )
    {
      if (!self()->isImmutable( QStringLiteral( "gradient" ) ))
        self()->mGradient = v;
    }

    /**
      Get Selects the default gradient
    */
    static
    int gradient()
    {
      return self()->mGradient;
    }

    /**
      Set Selects the default numeration (IUPAC)
    */
    static
    void setNumeration( int v )
    {
      if (!self()->isImmutable( QStringLiteral( "numeration" ) ))
        self()->mNumeration = v;
    }

    /**
      Get Selects the default numeration (IUPAC)
    */
    static
    int numeration()
    {
      return self()->mNumeration;
    }

    /**
      Set Show or hide the legend
    */
    static
    void setShowlegend( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "showlegend" ) ))
        self()->mShowlegend = v;
    }

    /**
      Get Show or hide the legend
    */
    static
    bool showlegend()
    {
      return self()->mShowlegend;
    }

    /**
      Set Whether the atomic mass will be displayed in the PSE-Table
    */
    static
    void setPselook( int v )
    {
      if (!self()->isImmutable( QStringLiteral( "pselook" ) ))
        self()->mPselook = v;
    }

    /**
      Get Whether the atomic mass will be displayed in the PSE-Table
    */
    static
    int pselook()
    {
      return self()->mPselook;
    }

    /**
      Set Selects the table view (default is classical)
    */
    static
    void setTable( int v )
    {
      if (!self()->isImmutable( QStringLiteral( "table" ) ))
        self()->mTable = v;
    }

    /**
      Get Selects the table view (default is classical)
    */
    static
    int table()
    {
      return self()->mTable;
    }

    /**
      Set Whether to use a logarithmic gradient for the Kalzium Covalent Radius Gradient feature
    */
    static
    void setLogarithmicCovalentRadiusGradient( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "LogarithmicCovalentRadiusGradient" ) ))
        self()->mLogarithmicCovalentRadiusGradient = v;
    }

    /**
      Get Whether to use a logarithmic gradient for the Kalzium Covalent Radius Gradient feature
    */
    static
    bool logarithmicCovalentRadiusGradient()
    {
      return self()->mLogarithmicCovalentRadiusGradient;
    }

    /**
      Set Whether to use a logarithmic gradient for the Kalzium van der Waals Radius Gradient feature
    */
    static
    void setLogarithmicVanDerWaalsRadiusGradient( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "LogarithmicVanDerWaalsRadiusGradient" ) ))
        self()->mLogarithmicVanDerWaalsRadiusGradient = v;
    }

    /**
      Get Whether to use a logarithmic gradient for the Kalzium van der Waals Radius Gradient feature
    */
    static
    bool logarithmicVanDerWaalsRadiusGradient()
    {
      return self()->mLogarithmicVanDerWaalsRadiusGradient;
    }

    /**
      Set Whether to use a logarithmic gradient for the Kalzium Mass Gradient feature
    */
    static
    void setLogarithmicMassGradient( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "LogarithmicMassGradient" ) ))
        self()->mLogarithmicMassGradient = v;
    }

    /**
      Get Whether to use a logarithmic gradient for the Kalzium Mass Gradient feature
    */
    static
    bool logarithmicMassGradient()
    {
      return self()->mLogarithmicMassGradient;
    }

    /**
      Set Whether to use a logarithmic gradient for the Kalzium Boiling Point Gradient feature
    */
    static
    void setLogarithmicBoilingPointGradient( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "LogarithmicBoilingPointGradient" ) ))
        self()->mLogarithmicBoilingPointGradient = v;
    }

    /**
      Get Whether to use a logarithmic gradient for the Kalzium Boiling Point Gradient feature
    */
    static
    bool logarithmicBoilingPointGradient()
    {
      return self()->mLogarithmicBoilingPointGradient;
    }

    /**
      Set Whether to use a logarithmic gradient for the Kalzium Melting Point Gradient feature
    */
    static
    void setLogarithmicMeltingPointGradient( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "LogarithmicMeltingPointGradient" ) ))
        self()->mLogarithmicMeltingPointGradient = v;
    }

    /**
      Get Whether to use a logarithmic gradient for the Kalzium Melting Point Gradient feature
    */
    static
    bool logarithmicMeltingPointGradient()
    {
      return self()->mLogarithmicMeltingPointGradient;
    }

    /**
      Set Whether to use a logarithmic gradient for the Kalzium Electronegativity Gradient feature
    */
    static
    void setLogarithmicElectronegativityGradient( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "LogarithmicElectronegativityGradient" ) ))
        self()->mLogarithmicElectronegativityGradient = v;
    }

    /**
      Get Whether to use a logarithmic gradient for the Kalzium Electronegativity Gradient feature
    */
    static
    bool logarithmicElectronegativityGradient()
    {
      return self()->mLogarithmicElectronegativityGradient;
    }

    /**
      Set Whether to use a logarithmic gradient for the Kalzium Discovery Date Gradient feature
    */
    static
    void setLogarithmicDiscoverydateGradient( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "LogarithmicDiscoverydateGradient" ) ))
        self()->mLogarithmicDiscoverydateGradient = v;
    }

    /**
      Get Whether to use a logarithmic gradient for the Kalzium Discovery Date Gradient feature
    */
    static
    bool logarithmicDiscoverydateGradient()
    {
      return self()->mLogarithmicDiscoverydateGradient;
    }

    /**
      Set Whether to use a logarithmic gradient for the Kalzium Electron Affinity Gradient feature
    */
    static
    void setLogarithmicElectronaffinityGradient( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "LogarithmicElectronaffinityGradient" ) ))
        self()->mLogarithmicElectronaffinityGradient = v;
    }

    /**
      Get Whether to use a logarithmic gradient for the Kalzium Electron Affinity Gradient feature
    */
    static
    bool logarithmicElectronaffinityGradient()
    {
      return self()->mLogarithmicElectronaffinityGradient;
    }

    /**
      Set Whether to use a logarithmic gradient for the Kalzium Ionization Gradient feature
    */
    static
    void setLogarithmicIonizationGradient( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "LogarithmicIonizationGradient" ) ))
        self()->mLogarithmicIonizationGradient = v;
    }

    /**
      Get Whether to use a logarithmic gradient for the Kalzium Ionization Gradient feature
    */
    static
    bool logarithmicIonizationGradient()
    {
      return self()->mLogarithmicIonizationGradient;
    }

    /**
      Set Selects the default gradient color
    */
    static
    void setColorgradientbox( int v )
    {
      if (!self()->isImmutable( QStringLiteral( "colorgradientbox" ) ))
        self()->mColorgradientbox = v;
    }

    /**
      Get Selects the default gradient color
    */
    static
    int colorgradientbox()
    {
      return self()->mColorgradientbox;
    }

    /**
      Set Selects the color if no scheme is selected
    */
    static
    void setNoscheme( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "noscheme" ) ))
        self()->mNoscheme = v;
    }

    /**
      Get Selects the color if no scheme is selected
    */
    static
    QColor noscheme()
    {
      return self()->mNoscheme;
    }

    /**
      Set Selects the color of liquid elements
    */
    static
    void setColor_liquid( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "color_liquid" ) ))
        self()->mColor_liquid = v;
    }

    /**
      Get Selects the color of liquid elements
    */
    static
    QColor color_liquid()
    {
      return self()->mColor_liquid;
    }

    /**
      Set Selects the color of solid elements
    */
    static
    void setColor_solid( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "color_solid" ) ))
        self()->mColor_solid = v;
    }

    /**
      Get Selects the color of solid elements
    */
    static
    QColor color_solid()
    {
      return self()->mColor_solid;
    }

    /**
      Set Selects the color of vaporous elements
    */
    static
    void setColor_vapor( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "color_vapor" ) ))
        self()->mColor_vapor = v;
    }

    /**
      Get Selects the color of vaporous elements
    */
    static
    QColor color_vapor()
    {
      return self()->mColor_vapor;
    }

    /**
      Set Selects the color of radioactive elements
    */
    static
    void setColor_radioactive( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "color_radioactive" ) ))
        self()->mColor_radioactive = v;
    }

    /**
      Get Selects the color of radioactive elements
    */
    static
    QColor color_radioactive()
    {
      return self()->mColor_radioactive;
    }

    /**
      Set Selects the color of artificial elements
    */
    static
    void setColor_artificial( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "color_artificial" ) ))
        self()->mColor_artificial = v;
    }

    /**
      Get Selects the color of artificial elements
    */
    static
    QColor color_artificial()
    {
      return self()->mColor_artificial;
    }

    /**
      Set Selects the color of the elements in block s
    */
    static
    void setBlock_s( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "block_s" ) ))
        self()->mBlock_s = v;
    }

    /**
      Get Selects the color of the elements in block s
    */
    static
    QColor block_s()
    {
      return self()->mBlock_s;
    }

    /**
      Set Selects the color of the elements in block p
    */
    static
    void setBlock_p( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "block_p" ) ))
        self()->mBlock_p = v;
    }

    /**
      Get Selects the color of the elements in block p
    */
    static
    QColor block_p()
    {
      return self()->mBlock_p;
    }

    /**
      Set Selects the color of the elements in block d
    */
    static
    void setBlock_d( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "block_d" ) ))
        self()->mBlock_d = v;
    }

    /**
      Get Selects the color of the elements in block d
    */
    static
    QColor block_d()
    {
      return self()->mBlock_d;
    }

    /**
      Set Selects the color of the elements in block f
    */
    static
    void setBlock_f( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "block_f" ) ))
        self()->mBlock_f = v;
    }

    /**
      Get Selects the color of the elements in block f
    */
    static
    QColor block_f()
    {
      return self()->mBlock_f;
    }

    /**
      Set Selects the color of the elements in group 1
    */
    static
    void setGroup_1( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "group_1" ) ))
        self()->mGroup_1 = v;
    }

    /**
      Get Selects the color of the elements in group 1
    */
    static
    QColor group_1()
    {
      return self()->mGroup_1;
    }

    /**
      Set Selects the color of the elements in group 2
    */
    static
    void setGroup_2( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "group_2" ) ))
        self()->mGroup_2 = v;
    }

    /**
      Get Selects the color of the elements in group 2
    */
    static
    QColor group_2()
    {
      return self()->mGroup_2;
    }

    /**
      Set Selects the color of the elements in group 3
    */
    static
    void setGroup_3( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "group_3" ) ))
        self()->mGroup_3 = v;
    }

    /**
      Get Selects the color of the elements in group 3
    */
    static
    QColor group_3()
    {
      return self()->mGroup_3;
    }

    /**
      Set Selects the color of the elements in group 4
    */
    static
    void setGroup_4( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "group_4" ) ))
        self()->mGroup_4 = v;
    }

    /**
      Get Selects the color of the elements in group 4
    */
    static
    QColor group_4()
    {
      return self()->mGroup_4;
    }

    /**
      Set Selects the color of the elements in group 5
    */
    static
    void setGroup_5( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "group_5" ) ))
        self()->mGroup_5 = v;
    }

    /**
      Get Selects the color of the elements in group 5
    */
    static
    QColor group_5()
    {
      return self()->mGroup_5;
    }

    /**
      Set Selects the color of the elements in group 6
    */
    static
    void setGroup_6( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "group_6" ) ))
        self()->mGroup_6 = v;
    }

    /**
      Get Selects the color of the elements in group 6
    */
    static
    QColor group_6()
    {
      return self()->mGroup_6;
    }

    /**
      Set Selects the color of the elements in group 7
    */
    static
    void setGroup_7( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "group_7" ) ))
        self()->mGroup_7 = v;
    }

    /**
      Get Selects the color of the elements in group 7
    */
    static
    QColor group_7()
    {
      return self()->mGroup_7;
    }

    /**
      Set Selects the color of the elements in group 8
    */
    static
    void setGroup_8( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "group_8" ) ))
        self()->mGroup_8 = v;
    }

    /**
      Get Selects the color of the elements in group 8
    */
    static
    QColor group_8()
    {
      return self()->mGroup_8;
    }

    /**
      Set Selects the color of the alkali metals
    */
    static
    void setAlkalie( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "alkalie" ) ))
        self()->mAlkalie = v;
    }

    /**
      Get Selects the color of the alkali metals
    */
    static
    QColor alkalie()
    {
      return self()->mAlkalie;
    }

    /**
      Set Selects the color of the rare-earth elements
    */
    static
    void setRare( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "rare" ) ))
        self()->mRare = v;
    }

    /**
      Get Selects the color of the rare-earth elements
    */
    static
    QColor rare()
    {
      return self()->mRare;
    }

    /**
      Set Selects the color of the non-metal elements
    */
    static
    void setNonmetal( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "nonmetal" ) ))
        self()->mNonmetal = v;
    }

    /**
      Get Selects the color of the non-metal elements
    */
    static
    QColor nonmetal()
    {
      return self()->mNonmetal;
    }

    /**
      Set Selects the color of the alkaline earth metals
    */
    static
    void setAlkaline( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "alkaline" ) ))
        self()->mAlkaline = v;
    }

    /**
      Get Selects the color of the alkaline earth metals
    */
    static
    QColor alkaline()
    {
      return self()->mAlkaline;
    }

    /**
      Set Selects the color of the metals which do not fit into the other categories
    */
    static
    void setOther_metal( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "other_metal" ) ))
        self()->mOther_metal = v;
    }

    /**
      Get Selects the color of the metals which do not fit into the other categories
    */
    static
    QColor other_metal()
    {
      return self()->mOther_metal;
    }

    /**
      Set Selects the color of the halogen elements
    */
    static
    void setHalogene( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "halogene" ) ))
        self()->mHalogene = v;
    }

    /**
      Get Selects the color of the halogen elements
    */
    static
    QColor halogene()
    {
      return self()->mHalogene;
    }

    /**
      Set Selects the color of the transition elements
    */
    static
    void setTransition( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "transition" ) ))
        self()->mTransition = v;
    }

    /**
      Get Selects the color of the transition elements
    */
    static
    QColor transition()
    {
      return self()->mTransition;
    }

    /**
      Set Selects the color of the noble gases
    */
    static
    void setNoble_gas( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "noble_gas" ) ))
        self()->mNoble_gas = v;
    }

    /**
      Get Selects the color of the noble gases
    */
    static
    QColor noble_gas()
    {
      return self()->mNoble_gas;
    }

    /**
      Set Selects the color of the metalloid elements
    */
    static
    void setMetalloid( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "metalloid" ) ))
        self()->mMetalloid = v;
    }

    /**
      Get Selects the color of the metalloid elements
    */
    static
    QColor metalloid()
    {
      return self()->mMetalloid;
    }

    /**
      Set Selects the color of the maximal value from the gradient
    */
    static
    void setMaxColor( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "MaxColor" ) ))
        self()->mMaxColor = v;
    }

    /**
      Get Selects the color of the maximal value from the gradient
    */
    static
    QColor maxColor()
    {
      return self()->mMaxColor;
    }

    /**
      Set Selects the color of the minimal value from the gradient
    */
    static
    void setMinColor( const QColor & v )
    {
      if (!self()->isImmutable( QStringLiteral( "MinColor" ) ))
        self()->mMinColor = v;
    }

    /**
      Get Selects the color of the minimal value from the gradient
    */
    static
    QColor minColor()
    {
      return self()->mMinColor;
    }

    /**
      Set This value defines whether eV or kJ/mol should be used within Kalzium
    */
    static
    void setEnergiesUnit( int v )
    {
      if (!self()->isImmutable( QStringLiteral( "energiesUnit" ) ))
        self()->mEnergiesUnit = v;
    }

    /**
      Get This value defines whether eV or kJ/mol should be used within Kalzium
    */
    static
    int energiesUnit()
    {
      return self()->mEnergiesUnit;
    }

    /**
      Set This value defines which temperature scale should be used within Kalzium
    */
    static
    void setTemperatureUnit( int v )
    {
      if (!self()->isImmutable( QStringLiteral( "temperatureUnit" ) ))
        self()->mTemperatureUnit = v;
    }

    /**
      Get This value defines which temperature scale should be used within Kalzium
    */
    static
    int temperatureUnit()
    {
      return self()->mTemperatureUnit;
    }

    /**
      Set This value defines which length scale should be used within Kalzium
    */
    static
    void setLengthUnit( int v )
    {
      if (!self()->isImmutable( QStringLiteral( "lengthUnit" ) ))
        self()->mLengthUnit = v;
    }

    /**
      Get This value defines which length scale should be used within Kalzium
    */
    static
    int lengthUnit()
    {
      return self()->mLengthUnit;
    }

    /**
      Set This value defines whether eV or kJ/mol should be used within Kalzium
    */
    static
    void setCombobox_energies( int v )
    {
      if (!self()->isImmutable( QStringLiteral( "combobox_energies" ) ))
        self()->mCombobox_energies = v;
    }

    /**
      Get This value defines whether eV or kJ/mol should be used within Kalzium
    */
    static
    int combobox_energies()
    {
      return self()->mCombobox_energies;
    }

    /**
      Set This value defines which temperature scale should be used within Kalzium
    */
    static
    void setCombobox_temperature( int v )
    {
      if (!self()->isImmutable( QStringLiteral( "combobox_temperature" ) ))
        self()->mCombobox_temperature = v;
    }

    /**
      Get This value defines which temperature scale should be used within Kalzium
    */
    static
    int combobox_temperature()
    {
      return self()->mCombobox_temperature;
    }

    /**
      Set This value defines which length scale should be used within Kalzium
    */
    static
    void setCombobox_length( int v )
    {
      if (!self()->isImmutable( QStringLiteral( "combobox_length" ) ))
        self()->mCombobox_length = v;
    }

    /**
      Get This value defines which length scale should be used within Kalzium
    */
    static
    int combobox_length()
    {
      return self()->mCombobox_length;
    }

    /**
      Set True if schema was last selected
    */
    static
    void setSchemaSelected( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "schemaSelected" ) ))
        self()->mSchemaSelected = v;
    }

    /**
      Get True if schema was last selected
    */
    static
    bool schemaSelected()
    {
      return self()->mSchemaSelected;
    }

    /**
      Set This value defines which unit is used for the wavelength
    */
    static
    void setSpectrumWavelengthUnit( int v )
    {
      if (!self()->isImmutable( QStringLiteral( "spectrumWavelengthUnit" ) ))
        self()->mSpectrumWavelengthUnit = v;
    }

    /**
      Get This value defines which unit is used for the wavelength
    */
    static
    int spectrumWavelengthUnit()
    {
      return self()->mSpectrumWavelengthUnit;
    }

    /**
      Set This value defines which Spectrum type is used. Emission or absorption spectrum
    */
    static
    void setSpectrumType( int v )
    {
      if (!self()->isImmutable( QStringLiteral( "spectrumType" ) ))
        self()->mSpectrumType = v;
    }

    /**
      Get This value defines which Spectrum type is used. Emission or absorption spectrum
    */
    static
    int spectrumType()
    {
      return self()->mSpectrumType;
    }

    /**
      Set This setting tells the nuclear calculator whether the amounts are always in terms of mass
    */
    static
    void setMass( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "mass" ) ))
        self()->mMass = v;
    }

    /**
      Get This setting tells the nuclear calculator whether the amounts are always in terms of mass
    */
    static
    bool mass()
    {
      return self()->mMass;
    }

    /**
      Set This setting says whether the user wants the gas to be ideal by default
    */
    static
    void setIdeal( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "ideal" ) ))
        self()->mIdeal = v;
    }

    /**
      Get This setting says whether the user wants the gas to be ideal by default
    */
    static
    bool ideal()
    {
      return self()->mIdeal;
    }

    /**
      Set This setting tells the concentration calculator that amount of solute is always in mass
    */
    static
    void setSoluteMass( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "soluteMass" ) ))
        self()->mSoluteMass = v;
    }

    /**
      Get This setting tells the concentration calculator that amount of solute is always in mass
    */
    static
    bool soluteMass()
    {
      return self()->mSoluteMass;
    }

    /**
      Set This setting tells the concentration calculator that amount of solvent is always in volume
    */
    static
    void setSolventVolume( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "solventVolume" ) ))
        self()->mSolventVolume = v;
    }

    /**
      Get This setting tells the concentration calculator that amount of solvent is always in volume
    */
    static
    bool solventVolume()
    {
      return self()->mSolventVolume;
    }

    /**
      Set This setting tells the molecular mass calculator whether extra details such as aliases should be shown
    */
    static
    void setAlias( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "alias" ) ))
        self()->mAlias = v;
    }

    /**
      Get This setting tells the molecular mass calculator whether extra details such as aliases should be shown
    */
    static
    bool alias()
    {
      return self()->mAlias;
    }

    /**
      Set This setting tells the molecular calculator whether the add Alias tab should be shown
    */
    static
    void setAddAlias( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "addAlias" ) ))
        self()->mAddAlias = v;
    }

    /**
      Get This setting tells the molecular calculator whether the add Alias tab should be shown
    */
    static
    bool addAlias()
    {
      return self()->mAddAlias;
    }

    /**
      Set Show or hide the sidebar
    */
    static
    void setShowsidebar( bool v )
    {
      if (!self()->isImmutable( QStringLiteral( "showsidebar" ) ))
        self()->mShowsidebar = v;
    }

    /**
      Get Show or hide the sidebar
    */
    static
    bool showsidebar()
    {
      return self()->mShowsidebar;
    }

  protected:
    Prefs();
    friend class PrefsHelper;


    // Periodic Table
    int mSchemaPSE;
    int mColorschemebox;
    int mGradient;
    int mNumeration;
    bool mShowlegend;
    int mPselook;
    int mTable;

    // Logarithmic Gradients
    bool mLogarithmicCovalentRadiusGradient;
    bool mLogarithmicVanDerWaalsRadiusGradient;
    bool mLogarithmicMassGradient;
    bool mLogarithmicBoilingPointGradient;
    bool mLogarithmicMeltingPointGradient;
    bool mLogarithmicElectronegativityGradient;
    bool mLogarithmicDiscoverydateGradient;
    bool mLogarithmicElectronaffinityGradient;
    bool mLogarithmicIonizationGradient;

    // Colors
    int mColorgradientbox;
    QColor mNoscheme;
    QColor mColor_liquid;
    QColor mColor_solid;
    QColor mColor_vapor;
    QColor mColor_radioactive;
    QColor mColor_artificial;
    QColor mBlock_s;
    QColor mBlock_p;
    QColor mBlock_d;
    QColor mBlock_f;
    QColor mGroup_1;
    QColor mGroup_2;
    QColor mGroup_3;
    QColor mGroup_4;
    QColor mGroup_5;
    QColor mGroup_6;
    QColor mGroup_7;
    QColor mGroup_8;
    QColor mAlkalie;
    QColor mRare;
    QColor mNonmetal;
    QColor mAlkaline;
    QColor mOther_metal;
    QColor mHalogene;
    QColor mTransition;
    QColor mNoble_gas;
    QColor mMetalloid;
    QColor mMaxColor;
    QColor mMinColor;

    // Units
    int mEnergiesUnit;
    int mTemperatureUnit;
    int mLengthUnit;
    int mCombobox_energies;
    int mCombobox_temperature;
    int mCombobox_length;
    bool mSchemaSelected;

    // Spectrum
    int mSpectrumWavelengthUnit;
    int mSpectrumType;

    // Calculator
    bool mMass;
    bool mIdeal;
    bool mSoluteMass;
    bool mSolventVolume;
    bool mAlias;
    bool mAddAlias;

    // Sidebar
    bool mShowsidebar;

  private:
};

#endif

